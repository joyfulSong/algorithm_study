/* 백준 14502 연구소
- 바이러스 (2)를 만나면 큐에 저장한다. 큐의 front를 꺼내어 접근하므로, 방문순서대로 탐색하는 평행탐색이다
- 벽을 어디에 세워야할 지 규칙을 정하기 어렵기 때문에 부르트포스로 풀어야한다.
- 벽 세개를 세우기 위한 경우의 수는 총 (n*m) * ((n*m)-1) * ((n*m)-2) 가지. 재귀함수 사용
- 알아야하는건 최대 안전영역 크기인 '상태'가 아니라 '개수'임, 즉 res값만 갱신해서 max를 남기면 되는 문제
*/

#include <iostream>
#include <queue>
#include <array>

using namespace std;

int lab[9][9], lab_tmp[9][9];
int res(0), n(0), m(0);
int dx[4] = { 0, 0, -1, 1 }, dy[4] = { 1, -1, 0, 0 };

// queue <pair<int, int>>, q.front.first(), second() 대신
struct loc
{
    int a, b;

    //생성자
    loc(int x, int y)
    {
        a = x;
        b = y;
    }
};

// bfs로 연구소 전체 탐색
void bfs()
{
    //바이러스 위치 저장 및 추가
    queue<loc> virus;

    //원본을 건드리지 않기 위해 복사하면서 바이러스 위치를 저장해둔다.
    int num(0);
    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < m + 1; j++)
        {
            num = lab[i][j];
            lab_tmp[i][j] = num;

            if (num == 2)
            {
                virus.push(loc(i, j));
            }
        }
    }

    while (!virus.empty())
    {
        loc cur = virus.front();
        int cur_x = virus.front().a;
        int cur_y = virus.front().b;

        virus.pop();

        for (int i = 0; i < 4; i++)
        {
            int next_x = cur_x + dx[i];
            int next_y = cur_y + dy[i];
            //범위 밖이면 아래 과정은 하지 않는다.
            if (next_x < 1 || next_y < 1 || next_x > n || next_y > m)
                continue;

            if (lab_tmp[next_x][next_y] == 0)
            {
                lab_tmp[next_x][next_y] = 2; // 바이러스로 만들고
                virus.push(loc(next_x, next_y)); // 바이러스 목록에 저장한다
            }
        }
    }

    // 큐가 비었다는 것은 모든 바이러스에 대한 탐색이 끝났다는것, 결과를 확인한다.
    int res_tmp = res; // 이전에 들고있던 res 값을 tmp에 저장해두고 나중에 비교
    res = 0;
    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < m + 1; j++)
        {
            if (lab_tmp[i][j] == 0)
                res += 1;
        }
    }

    res = max(res, res_tmp);
}

// 벽 3개를 만든 뒤 bfs 호출 용도
//void wall_cnt(int i, int j, int cnt)
void wall_cnt(int cnt)
{
    if (cnt == 3)
    {
        bfs();
        return;
    }

    else
    {
        //for (a; a < n + 1; a++) // 받아온 지점부터 도는게 맞나?
        for (int i = 1; i < n + 1; i++)
        {
            for (int j = 1; j < m + 1; j++)
            {
                if (lab[i][j] == 0)
                {
                    lab[i][j] = 1;
                    wall_cnt(cnt + 1);
                    lab[i][j] = 0;
                }
            }
        }
    }
}

int main()
{
    cin >> n >> m;

    // 벽 정보 저장
    int tmp(0);
    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < m + 1; j++)
        {
            cin >> tmp;
            lab[i][j] = tmp;
        }
    }

    // 부르트포스(완전탐색)으로 벽 세우기
    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < m + 1; j++)
        {
            if (lab[i][j] == 0)
            {
                // 스택의 특성 활용
                lab[i][j] = 1;
                wall_cnt(1);
                lab[i][j] = 0;
            }
        }
    }

    cout << res << endl;
    return 0;
}


// 새로 배운 것
/*
void mapCopy(int(*a)[8], int(*b)[8]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            a[i][j] = b[i][j];
}

void bfs() {
    int spread[8][8]; //spread : 3개 벽을 세운 뒤 바이러스가 퍼졌을 때의 연구소
    mapCopy(spread, tmp);

--> 이차원 배열을 함수 매개변수로 전달 시, 배열 포인터를 씀. (포인터 배열은 포인터를 저장하는 배열, 배열 포인터는 배열을 가리키는 포인터)
매핑 시에 가로 길이만 전달받아서 배열의 각각 가로 주소에 접근함.

- 매개변수로 배열을 선언할 수 없음
- 함수 내에서 배열에 접근할 수 있도록 배열의 주소값을 전달하는 것은 가능
*/

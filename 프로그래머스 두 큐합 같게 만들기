/* 문제 요약
프로그래머스 두 큐합 같게 만들기

* 두 큐의 길이는 같음
* queue를 include 해서 사용
* 하나의 큐의 원소를 빼서 다른 큐에 넣는 작업을 최소로 n회 수행
* 큐의 특성을 활용하는 것. 꼬리잡기하듯, 순서는 바뀌지 않으므로 몇개씩 빼느냐는 중요하지 않음
* 각각의 큐의 원소들의 합, 큐 전체의 합의 절반이 int의 크기보다 커질 수 있으므로 long을 써야함
*    하나의 원소의 최대 크기가 10의 9승, 개수는 하나의 큐가 30만이므로, 하나의 큐의 합이 30만 * 10의 9승 = 600,000,000,000,000
*    (signed) int : 2,147,483,647
*    unsigned long long : 2,147,483,647
*    long 자료형
        32bit -> int와 동일 
        64bit -> long long과 동일 9,223,372,036,854,775,807
*/

#include <string>
#include <vector> // vector로 쓰는 경우, earse가 container의 size에 비례하는 시간이 걸려서 o(n)으로 시간 초과난다고 함
#include <queue>

using namespace std;

int solution(vector<int> queue1, vector<int> queue2) {
    long sum1(0);
    long sum2(0);
    long half_sum(0);
    int cnt(0); // 몇번 빼기-넣기 셋트 진행했는지

    //for doing push_back and pop_front
    queue<int> q1,q2;

    for(int i(0); i < queue1.size(); i++)
    {
        sum1 += queue1[i];
        sum2 += queue2[i];
        
        q1.push(queue1[i]);
        q2.push(queue2[i]);
    }
    half_sum = (sum1+sum2)/2;

    // 두 큐의 합이 같아질 수 없다면 불가능함
    if((sum1+sum2)%2 != 0) return -1;

    while(true)
    {
        if(cnt > queue1.size()*3) // 한번 전부 다 교환, 한번 온게 또 감 그래서 세번, 네번째면 원복
        {
            break;
        }
        
        int tmp(0);
        // 첫번째 큐의 합이 더 크다면 원소를 빼서 두번째 큐에 삽입, 반대라면 반대로
        if(sum1 > sum2)
        {
            tmp = q1.front(); q1.pop();
            q2.push(tmp);
            sum1 -= tmp;
            sum2 += tmp;
        }
        
        else if(sum1 < sum2)
        {
            tmp = q2.front(); q2.pop();
            q1.push(tmp);
            sum1 += tmp;
            sum2 -= tmp;
        }

        //if(sum1 == sum2)
        else
        {
            return cnt;
        }
        
        cnt++;
    }
    
    return -1;
}
